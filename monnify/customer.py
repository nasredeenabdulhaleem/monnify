from .root import MonnifyAPI


class Customer(MonnifyAPI):
    def __init__(self):
        super().__init__()

    @classmethod
    def create_reserved_account(cls, **kwargs):
        """
        Create Reserved Account(General)
        This method allows the creation of dedicated virtual accounts for your customers.

        Args:
            accountReference (str): Unique identifier for the reserved account. This can be a combination of letters and numbers. e.g. 1234567890
            accountName (str): Name of the reserved account. e.g. John Doe
            currencyCode (str): Currency code for the reserved account. e.g. NGN
            contractCode (str): Contract code for the reserved account. e.g. 1234567890
            customerEmail (str): Email address of the reserved account owner. e.g.
            bvn (str): The BVN attached to a reserve account.
            getAllAvailableBanks (bool): This decides whether account numbers be generated to all allowable banks.
            preferredBanks (list): This field helps to choose certain banks for virtual account creation. This field is needed if getAvailableBanks is false.
            incomeSplitConfig (dict,optional): A configuration on how payments are to be split among subaccounts.
            restrictPaymentSource (bool,optional): Decides if payment should be restricted to some reserved accounts.
            allowedPaymentSource (dict,optional): This captures BVNs or account numbers or account names that are permitted to fund a reserved account. This is mandatory if restrictPaymentSource is set to true.
            nin (str,optional): The customer's NIN.

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request(
            "/api/v2/bank-transfer/reserved-accounts", "POST", data=kwargs
        )

    @classmethod
    def create_reserved_account_invoice(cls, **kwargs):
        """
        Create Reserved Account(Invoice)
            This method allows the creation of an invoiced reserved account.

        Args:
            contractCode (str): The merchant's contract code.
            accountName (str): The name to be displayed during name enquiry.
            currencyCode (str): The currency allowed, "NGN".
            accountReference (str): A unique reference generated by the merchant.
            customerName (str): Full name of the customer.
            customerEmail (str): Email address of the customer.
            reservedAccountType (str): This should be "INVOICE".
            bvn (str): The customer's BVN.
            nin (str): The customer's NIN.
        Returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request(
            "/api/v1/bank-transfer/reserved-accounts", "POST", data=kwargs
        )

    @classmethod
    def get_reserved_account_detail(cls, accountReference, **kwargs):
        """
        Get Reserved Account Details
            This method returns details of an account reserved for a customer

        Args:

        accountReerence (str): The unique reference used in creating the reserved account.

        returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request(
            f"/api/v2/bank-transfer/reserved-accounts/{accountReference}",
            "GET",
            data=kwargs,
        )

    @classmethod
    def get_linked_accounts(cls, **kwargs):
        """
        Add Linked Accounts
            This method links accounts with another partner bank to an existing customer.

        Args:
            getAllAvailableBanks (bool): Determine if all necessary banks should be used.
            preferredBanks (list): Contains bank codes of desired banks.
            accountReference (str): The unique reference used in creating the reserved account.

        Returns:
            dict: JSON response from Monnify API

        """
        accountReference = kwargs["accountReference"]
        return cls.make_request(
            f"/api/v1/bank-transfer/reserved-accounts/add-linked-accounts/{accountReference}",
            "PUT",
            data=kwargs,
        )

    @classmethod
    def update_bvn_for_reserved_account(cls, reservedAccountReference, bvn):
        """
        Update BVN for a Reserve Account
        This method updates BVN of customers reserved account.

        Args:
            reservedAccountReference (str): The unique reference of the reserved account.
            bvn (str): The BVN used in creating the reserved account.

        Returns:
            dict: JSON response from Monnify API
        """
        data = {"bvn": bvn}

        return cls.make_request(
            f"/api/v1/bank-transfer/reserved-accounts/update-customer-bvn/{reservedAccountReference}",
            "PUT",
            data=data,
        )

    @classmethod
    def update_allowed_payment_sources(cls, **kwargs):
        """
        Allowed Payment Source(s)
        This method manages accounts that can fund a reserved account using either BVNs, Account Name or Account Number.

        Args:
            accountReference (str): The unique reference used in creating the reserved account.
            restrictPaymentSource (bool): This field activate or de-activate restricting of payment sources for a reserved account.
            allowedPaymentSource (dict): A collection of possible payment sources. This should include 'bvns', 'bankAccounts', 'accountNumbers', 'bankCode', 'accountNames'.

        Returns:
            dict: JSON response from Monnify API
        """
        accountReference = kwargs["accountReference"]
        return cls.make_request(
            f"/api/v1/bank-transfer/reserved-accounts/update-payment-source-filter/{accountReference}",
            "PUT",
            data=kwargs,
        )

    @classmethod
    def update_split_config_for_reserved_account(cls, accountReference, **kwargs):
        """
        Updating Split Config for Reserved Account
        This method updates the split config of a customer reserved account.

        Args:
            accountReference (str): The unique reference used in creating the reserved account.
            subAccountCode (str): The unique reference for the sub account that should receive the split.
            feeBearer (bool): This field determine if the sub account should bear transaction fees or not.
            feePercentage (float): The percentage of the transaction fee to be borne by the sub account.
            splitPercentage (float): The percentage of the amount paid to be split into the sub account.

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request(
            f"/api/v1/bank-transfer/reserved-accounts/update-income-split-config/{accountReference}",
            "PUT",
            data=kwargs,
        )

    @classmethod
    def deallocate_reserved_account(cls, accountReference):
        """
        Deallocating a reserved account
        This method allows you to deallocate/delete already created a reserved account.

        Args:
            accountReference (str): The unique reference used to identify this reserved account.

        Returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request(
            f"/api/v1/bank-transfer/reserved-accounts/{accountReference}", "DELETE"
        )

    @classmethod
    def get_reserved_account_transactions(cls, accountReference, page=0, size=10):
        """
        Get Reserved Account Transactions
        This method returns the list of all transactions done on a reserved account.

        Args:
            accountReference (str): The unique reference used in creating the reserved account.
            page (int): The page of data you want returned by Monnify (Starts from 0).
            size (int): The number of records you want returned in a page.

        Returns:
            dict: JSON response from Monnify API
        """
        params = {"accountReference": accountReference, "page": page, "size": size}

        return cls.make_request(
            "/api/v1/bank-transfer/reserved-accounts/transactions", "GET", params=params
        )

    @classmethod
    def update_kyc_info(cls, accountReference, **kwargs):
        """
        Update KYC Info
        This method links customers' BVN/NIN to their respective reserved accounts.

        Args:
            accountReference (str): The account reference linked to the reserved account being updated.
            bvn (str): The customer's BVN.
            nin (str): The customerâ€™s NIN.

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request(
            f"/api/v1/bank-transfer/reserved-accounts/{accountReference}/kyc-info",
            "PUT",
            data=kwargs,
        )
