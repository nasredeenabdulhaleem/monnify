from .root import MonnifyAPI


class LimitProfile(MonnifyAPI):
    def __init__(self):
        super().__init__()

    @classmethod
    def create_limit_profiles(cls, **kwargs):
        """
        Create Limit Profile(s)
        This endpoint creates limit profiles on a customer's account.

        Args:
            limitProfileName (str): The name of the Limit Profile
            singleTransactionValue (float): The maximum amount that can be allowed per transaction on the reserved accounts.
            dailyTransactionValue (float): The maximum amount per day in all transactions that can be allowed on the reserved accounts
            dailyTransactionVolume (float): The maximum number of transaction count per day allowed on the reserved accounts

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request("/api/v1/limit-profile/", "POST", data=kwargs)

    @classmethod
    def get_limit_profiles(cls):
        """
        Get Limit Profiles
        This endpoint returns the list of all Limit Profiles that have been created for your customers.

        Returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request("/api/v1/limit-profile/", "GET")

    @classmethod
    def update_limit_profile(cls, limitProfileCode, **kwargs):
        """
        Update Limit Profile
        This endpoint updates the information on an existing Limit Profile.

        Args:
            limitProfileCode (str): The generated limit profile code passed as path parameter
            limitProfileName (str): The name of the Limit Profile
            singleTransactionValue (float): The maximum amount that can be allowed per transaction on the reserved accounts.
            dailyTransactionValue (float): The maximum amount per day in all transactions that can be allowed on the reserved accounts
            dailyTransactionVolume (float): The maximum number of transaction count per day allowed on the reserved accounts

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request(
            f"/api/v1/limit-profile/{limitProfileCode}", "PUT", data=kwargs
        )

    @classmethod
    def reserve_account_with_limit(cls, **kwargs):
        """
        Reserve Account with Limit
        This endpoint reserves an account for your customers with a transaction limit profile on it.

        Args:
            accountReference (str): A unique reference generated by merchants.
            accountName (str): The name to be displayed during name enquiry
            currencyCode (str): The currency payments will be received with
            contractCode (str): The merchant contract code
            customerEmail (str): The customer's email
            incomeSplitConfig (dict): A configuration on how payments are to be split among subaccounts
            limitProfileCode (str): The unique identifier that references the limit profile to associate with the reserved account

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request(
            "/api/v1/bank-transfer/reserved-accounts/limit", "POST", data=kwargs
        )

    @classmethod
    def update_reserve_account_limit(cls, **kwargs):
        """
        Update Reserve Account Limit
        This endpoint updates the information on an existing Limit Profile for a Reserved Account.

        Args:
            accountReference (str): A unique reference generated by merchants.
            limitProfileCode (str): The unique identifier that references the limit profile to associate with the reserved accounts.

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request(
            "/api/v1/bank-transfer/reserved-accounts/limit", "PUT", data=kwargs
        )
