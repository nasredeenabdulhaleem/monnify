from .root import MonnifyAPI


class PayCodeApi(MonnifyAPI):
    def __init__(self):
        super().__init__()

    @classmethod
    def create_paycode(cls, **kwargs):
        """
        Create Paycode
        The endpoint allows merchant create paycodes via API

        Args:
            beneficiaryName (str): The customer's name
            amount (float): The amount to be withdrawn
            paycodeReference (str): A unique reference generated by the merchant
            expiryDate (str): The expiry date for the paycode. The format is:YYYY-MM-DD HH:MM:SS
            clientId (str): The merchant's APIKey

        Returns:
            dict: JSON response from Monnify API
        """

        return cls.make_request("/api/v1/paycode", "POST", data=kwargs)

    @classmethod
    def get_paycode(cls, paycodeReference):
        """
        Get Paycode
        This endpoint returns paycode information for a given paycode reference

        Args:
            paycodeReference (str): The unique reference for the paycode

        Returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request(f"/api/v1/paycode/{paycodeReference}", "GET")

    @classmethod
    def get_clear_paycode(cls, paycodeReference):
        """
        Get Clear Paycode
        This endpoint is necessary when you want the paycode information returned unmasked

        Args:
            paycodeReference (str): The unique reference for the paycode

        Returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request(f"/api/v1/paycode/{paycodeReference}/authorize", "GET")

    @classmethod
    def fetch_paycodes(
        cls,
        transactionReference=None,
        beneficiaryName=None,
        transactionStatus=None,
        from_timestamp=None,
        to_timestamp=None,
    ):
        """
        Fetch Paycodes
        This endpoint returns a history of generated Paycodes over a period of time using some search criteria.

        Args:
            transactionReference (str, optional): The Monnify transactionReference
            beneficiaryName (str, optional): The customer name
            transactionStatus (str, optional): The status of the paycode
            from_timestamp (int, optional): A unix timestamp for the start date being considered
            to_timestamp (int, optional): A unix timestamp for the end date being considered

        Returns:
            dict: JSON response from Monnify API
        """
        params = {
            "transactionReference": transactionReference,
            "beneficiaryName": beneficiaryName,
            "transactionStatus": transactionStatus,
            "from": from_timestamp,
            "to": to_timestamp,
        }

        return cls.make_request("/api/v1/paycode", "GET", params=params)

    @classmethod
    def delete_paycode(cls, paycodeReference):
        """
        Delete Paycode
        This endpoint cancels or invalidates a generated Paycode.

        Args:
            paycodeReference (str): The unique reference for the paycode

        Returns:
            dict: JSON response from Monnify API
        """
        return cls.make_request(f"/api/v1/paycode/{paycodeReference}", "DELETE")
